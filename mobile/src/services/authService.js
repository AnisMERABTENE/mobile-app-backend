import { apiRequest } from './api';

/**
 * Service d'authentification
 * G√®re toutes les interactions avec l'API d'authentification
 */
class AuthService {
  
  /**
   * Connexion avec email/mot de passe
   */
  async login(email, password) {
    try {
      console.log('üîê Tentative de connexion pour:', email);
      
      const result = await apiRequest.post('/auth/login', {
        email: email.trim().toLowerCase(),
        password: password,
      });

      if (result.success) {
        console.log('‚úÖ Connexion API r√©ussie');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec connexion API:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur de connexion',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service login:', error);
      return {
        success: false,
        error: 'Impossible de se connecter au serveur',
      };
    }
  }

  /**
   * V√©rifier un token avec le backend (utile apr√®s Google OAuth)
   */
  async verifyTokenWithBackend(token) {
    try {
      console.log('üîç V√©rification du token avec le backend...');
      
      // Temporairement stocker le token pour la requ√™te
      const currentToken = await SecureStore.getItemAsync('authToken');
      await SecureStore.setItemAsync('authToken', token);
      
      const result = await apiRequest.get('/auth/profile');
      
      // Restaurer l'ancien token si la v√©rification √©choue
      if (!result.success && currentToken) {
        await SecureStore.setItemAsync('authToken', currentToken);
      }

      if (result.success) {
        console.log('‚úÖ Token valide, profil r√©cup√©r√©');
        return {
          success: true,
          data: {
            user: result.data.user,
            token: token
          }
        };
      } else {
        console.log('‚ùå Token invalide');
        return {
          success: false,
          error: result.error || 'Token invalide',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification token:', error);
      return {
        success: false,
        error: 'Erreur de v√©rification',
      };
    }
  }

  /**
   * Inscription
   */
  async register(userData) {
    try {
      console.log('üìù Tentative d\'inscription pour:', userData.email);
      
      const cleanUserData = {
        firstName: userData.firstName.trim(),
        lastName: userData.lastName.trim(),
        email: userData.email.trim().toLowerCase(),
        password: userData.password,
      };

      const result = await apiRequest.post('/auth/register', cleanUserData);

      if (result.success) {
        console.log('‚úÖ Inscription API r√©ussie');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec inscription API:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de l\'inscription',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service register:', error);
      return {
        success: false,
        error: 'Impossible de se connecter au serveur',
      };
    }
  }

  /**
   * R√©cup√©ration de mot de passe
   */
  async forgotPassword(email) {
    try {
      console.log('üîÑ Demande de r√©cup√©ration de mot de passe pour:', email);
      
      const result = await apiRequest.post('/auth/forgot-password', {
        email: email.trim().toLowerCase(),
      });

      if (result.success) {
        console.log('‚úÖ Email de r√©cup√©ration envoy√©');
        return {
          success: true,
          message: result.data.message,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration mot de passe:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de l\'envoi de l\'email',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service forgot password:', error);
      return {
        success: false,
        error: 'Impossible de se connecter au serveur',
      };
    }
  }

  /**
   * V√©rification du token
   */
  async verifyToken() {
    try {
      console.log('üîç V√©rification du token...');
      
      const result = await apiRequest.get('/auth/check-token');

      if (result.success) {
        console.log('‚úÖ Token valide');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.log('‚ùå Token invalide');
        return {
          success: false,
          error: result.error || 'Token invalide',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification token:', error);
      return {
        success: false,
        error: 'Erreur de v√©rification',
      };
    }
  }

  /**
   * R√©cup√©ration du profil utilisateur
   */
  async getProfile() {
    try {
      console.log('üë§ R√©cup√©ration du profil utilisateur...');
      
      const result = await apiRequest.get('/auth/profile');

      if (result.success) {
        console.log('‚úÖ Profil r√©cup√©r√©');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration profil:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration du profil',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service profil:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer le profil',
      };
    }
  }

  /**
   * Mise √† jour du profil
   */
  async updateProfile(updateData) {
    try {
      console.log('‚úèÔ∏è Mise √† jour du profil...');
      
      const result = await apiRequest.put('/auth/profile', updateData);

      if (result.success) {
        console.log('‚úÖ Profil mis √† jour');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec mise √† jour profil:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la mise √† jour',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service update profil:', error);
      return {
        success: false,
        error: 'Impossible de mettre √† jour le profil',
      };
    }
  }

  /**
   * D√©connexion
   */
  async logout() {
    try {
      console.log('üö™ D√©connexion...');
      
      const result = await apiRequest.post('/auth/logout');

      if (result.success) {
        console.log('‚úÖ D√©connexion API r√©ussie');
      } else {
        console.log('‚ö†Ô∏è D√©connexion API √©chou√©e (mais continuer la d√©connexion locale)');
      }

      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur service logout (mais continuer):', error);
      // M√™me en cas d'erreur API, on consid√®re la d√©connexion comme r√©ussie
      // car on va nettoyer le stockage local
      return { success: true };
    }
  }

  /**
   * V√©rification d'email
   */
  async verifyEmail(token) {
    try {
      console.log('üìß V√©rification d\'email...');
      
      const result = await apiRequest.post('/auth/verify-email', { token });

      if (result.success) {
        console.log('‚úÖ Email v√©rifi√©');
        return {
          success: true,
          message: result.data.message,
        };
      } else {
        console.error('‚ùå √âchec v√©rification email:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la v√©rification',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service verify email:', error);
      return {
        success: false,
        error: 'Impossible de v√©rifier l\'email',
      };
    }
  }

  /**
   * Renvoyer l'email de v√©rification
   */
  async resendVerificationEmail() {
    try {
      console.log('üìß Renvoi de l\'email de v√©rification...');
      
      const result = await apiRequest.post('/auth/resend-verification');

      if (result.success) {
        console.log('‚úÖ Email de v√©rification renvoy√©');
        return {
          success: true,
          message: result.data.message,
        };
      } else {
        console.error('‚ùå √âchec renvoi email:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors du renvoi',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service resend email:', error);
      return {
        success: false,
        error: 'Impossible de renvoyer l\'email',
      };
    }
  }
}

// Exporter une instance unique du service
export default new AuthService();