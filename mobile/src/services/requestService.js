import { apiRequest } from './api';

/**
 * Service pour les demandes
 * G√®re toutes les interactions avec l'API des demandes
 */
class RequestService {
  
  /**
   * R√©cup√©rer toutes les cat√©gories
   */
  async getCategories() {
    try {
      console.log('üìÇ R√©cup√©ration des cat√©gories...');
      
      const result = await apiRequest.get('/requests/categories');

      if (result.success) {
        console.log('‚úÖ Cat√©gories r√©cup√©r√©es:', result.data.count);
        return {
          success: true,
          data: result.data.categories,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration cat√©gories:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration des cat√©gories',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service getCategories:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer les cat√©gories',
      };
    }
  }

  /**
   * R√©cup√©rer les sous-cat√©gories d'une cat√©gorie
   */
  async getSubCategories(categoryId) {
    try {
      console.log('üè∑Ô∏è R√©cup√©ration des sous-cat√©gories pour:', categoryId);
      
      const result = await apiRequest.get(`/requests/categories/${categoryId}/subcategories`);

      if (result.success) {
        console.log('‚úÖ Sous-cat√©gories r√©cup√©r√©es:', result.data.count);
        return {
          success: true,
          data: result.data.subCategories,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration sous-cat√©gories:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration des sous-cat√©gories',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service getSubCategories:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer les sous-cat√©gories',
      };
    }
  }

  /**
   * Cr√©er une nouvelle demande
   */
  async createRequest(requestData) {
    try {
      console.log('üìù Cr√©ation d\'une nouvelle demande...');
      
      const result = await apiRequest.post('/requests', requestData);

      if (result.success) {
        console.log('‚úÖ Demande cr√©√©e avec succ√®s:', result.data.request.title);
        return {
          success: true,
          data: result.data.request,
        };
      } else {
        console.error('‚ùå √âchec cr√©ation demande:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la cr√©ation de la demande',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service createRequest:', error);
      return {
        success: false,
        error: 'Impossible de cr√©er la demande',
      };
    }
  }

  /**
   * R√©cup√©rer les demandes de l'utilisateur connect√©
   */
  async getMyRequests(page = 1, status = null) {
    try {
      console.log('üìã R√©cup√©ration des demandes utilisateur...');
      
      let url = `/requests/my/all?page=${page}`;
      if (status) {
        url += `&status=${status}`;
      }
      
      const result = await apiRequest.get(url);

      if (result.success) {
        console.log('‚úÖ Demandes r√©cup√©r√©es:', result.data.requests.length);
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration demandes:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration des demandes',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service getMyRequests:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer les demandes',
      };
    }
  }

  /**
   * R√©cup√©rer les statistiques des demandes
   */
  async getMyStats() {
    try {
      console.log('üìä R√©cup√©ration des statistiques...');
      
      const result = await apiRequest.get('/requests/my/stats');

      if (result.success) {
        console.log('‚úÖ Statistiques r√©cup√©r√©es');
        return {
          success: true,
          data: result.data.stats,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration stats:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration des statistiques',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service getMyStats:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer les statistiques',
      };
    }
  }

  /**
   * Rechercher des demandes par proximit√©
   */
  async searchNearby(longitude, latitude, maxDistance = 10000, category = null, page = 1) {
    try {
      console.log('üó∫Ô∏è Recherche par proximit√©...');
      
      let url = `/requests/search?longitude=${longitude}&latitude=${latitude}&maxDistance=${maxDistance}&page=${page}`;
      if (category) {
        url += `&category=${category}`;
      }
      
      const result = await apiRequest.get(url);

      if (result.success) {
        console.log('‚úÖ Demandes trouv√©es:', result.data.requests.length);
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec recherche proximit√©:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la recherche',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service searchNearby:', error);
      return {
        success: false,
        error: 'Impossible d\'effectuer la recherche',
      };
    }
  }

  /**
   * R√©cup√©rer une demande par ID
   */
  async getRequestById(requestId) {
    try {
      console.log('üëÅÔ∏è R√©cup√©ration demande:', requestId);
      
      const result = await apiRequest.get(`/requests/${requestId}`);

      if (result.success) {
        console.log('‚úÖ Demande r√©cup√©r√©e');
        return {
          success: true,
          data: result.data.request,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration demande:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration de la demande',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service getRequestById:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer la demande',
      };
    }
  }

  /**
   * Mettre √† jour une demande
   */
  async updateRequest(requestId, updateData) {
    try {
      console.log('‚úèÔ∏è Mise √† jour demande:', requestId);
      
      const result = await apiRequest.put(`/requests/${requestId}`, updateData);

      if (result.success) {
        console.log('‚úÖ Demande mise √† jour');
        return {
          success: true,
          data: result.data.request,
        };
      } else {
        console.error('‚ùå √âchec mise √† jour demande:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la mise √† jour',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service updateRequest:', error);
      return {
        success: false,
        error: 'Impossible de mettre √† jour la demande',
      };
    }
  }

  /**
   * Marquer une demande comme compl√©t√©e
   */
  async markAsCompleted(requestId) {
    try {
      console.log('‚úÖ Marquage demande comme compl√©t√©e:', requestId);
      
      const result = await apiRequest.patch(`/requests/${requestId}/complete`);

      if (result.success) {
        console.log('‚úÖ Demande marqu√©e comme compl√©t√©e');
        return {
          success: true,
          data: result.data.request,
        };
      } else {
        console.error('‚ùå √âchec marquage completion:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors du marquage',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service markAsCompleted:', error);
      return {
        success: false,
        error: 'Impossible de marquer comme compl√©t√©e',
      };
    }
  }

  /**
   * Supprimer une demande
   */
  async deleteRequest(requestId) {
    try {
      console.log('üóëÔ∏è Suppression demande:', requestId);
      
      const result = await apiRequest.delete(`/requests/${requestId}`);

      if (result.success) {
        console.log('‚úÖ Demande supprim√©e');
        return {
          success: true,
        };
      } else {
        console.error('‚ùå √âchec suppression demande:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la suppression',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service deleteRequest:', error);
      return {
        success: false,
        error: 'Impossible de supprimer la demande',
      };
    }
  }
}

// Exporter une instance unique du service
export default new RequestService();