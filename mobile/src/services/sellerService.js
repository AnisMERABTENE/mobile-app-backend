import { apiRequest } from './api';

/**
 * Service de gestion des vendeurs
 * G√®re toutes les interactions avec l'API vendeur pour l'√©dition du profil
 */
class SellerService {

  // ============================================================
  // üìã GESTION DU PROFIL VENDEUR
  // ============================================================

  /**
   * R√©cup√©rer le profil vendeur connect√©
   */
  async getProfile() {
    try {
      console.log('üë§ R√©cup√©ration du profil vendeur...');
      
      const result = await apiRequest.get('/seller/profile');

      if (result.success) {
        console.log('‚úÖ Profil vendeur r√©cup√©r√©');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration profil vendeur:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration du profil vendeur',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service profil vendeur:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer le profil vendeur',
      };
    }
  }

  /**
   * Mettre √† jour les informations g√©n√©rales du profil vendeur
   */
  async updateGeneralInfo(updateData) {
    try {
      console.log('‚úèÔ∏è Mise √† jour des informations g√©n√©rales...');
      
      const result = await apiRequest.put('/seller/profile', updateData);

      if (result.success) {
        console.log('‚úÖ Informations g√©n√©rales mises √† jour');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec mise √† jour informations:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la mise √† jour',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service update informations:', error);
      return {
        success: false,
        error: 'Impossible de mettre √† jour les informations',
      };
    }
  }

  // ============================================================
  // üè∑Ô∏è GESTION DES SP√âCIALIT√âS (CAT√âGORIES/SOUS-CAT√âGORIES)
  // ============================================================

  /**
   * Ajouter une nouvelle sp√©cialit√©
   */
  async addSpecialty(specialtyData) {
    try {
      console.log('‚ûï Ajout d\'une nouvelle sp√©cialit√©:', specialtyData.category);
      
      const result = await apiRequest.post('/seller/specialties', specialtyData);

      if (result.success) {
        console.log('‚úÖ Sp√©cialit√© ajout√©e avec succ√®s');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec ajout sp√©cialit√©:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de l\'ajout de la sp√©cialit√©',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service ajout sp√©cialit√©:', error);
      return {
        success: false,
        error: 'Impossible d\'ajouter la sp√©cialit√©',
      };
    }
  }

  /**
   * Modifier une sp√©cialit√© existante
   */
  async updateSpecialty(specialtyId, specialtyData) {
    try {
      console.log('‚úèÔ∏è Modification de la sp√©cialit√©:', specialtyId);
      
      const result = await apiRequest.put(`/seller/specialties/${specialtyId}`, specialtyData);

      if (result.success) {
        console.log('‚úÖ Sp√©cialit√© modifi√©e avec succ√®s');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec modification sp√©cialit√©:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la modification de la sp√©cialit√©',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service modification sp√©cialit√©:', error);
      return {
        success: false,
        error: 'Impossible de modifier la sp√©cialit√©',
      };
    }
  }

  /**
   * Supprimer une sp√©cialit√©
   */
  async removeSpecialty(specialtyId) {
    try {
      console.log('üóëÔ∏è Suppression de la sp√©cialit√©:', specialtyId);
      
      const result = await apiRequest.delete(`/seller/specialties/${specialtyId}`);

      if (result.success) {
        console.log('‚úÖ Sp√©cialit√© supprim√©e avec succ√®s');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec suppression sp√©cialit√©:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la suppression de la sp√©cialit√©',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service suppression sp√©cialit√©:', error);
      return {
        success: false,
        error: 'Impossible de supprimer la sp√©cialit√©',
      };
    }
  }

  // ============================================================
  // üè™ GESTION DU MAGASIN (M√âTHODES EXISTANTES PR√âSERV√âES)
  // ============================================================

  /**
   * Cr√©er un nouveau profil vendeur
   */
  async createProfile(profileData) {
    try {
      console.log('üÜï Cr√©ation d\'un nouveau profil vendeur...');
      
      const result = await apiRequest.post('/sellers/create', profileData);

      if (result.success) {
        console.log('‚úÖ Profil vendeur cr√©√© avec succ√®s');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec cr√©ation profil vendeur:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la cr√©ation du profil vendeur',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service cr√©ation profil vendeur:', error);
      return {
        success: false,
        error: 'Impossible de cr√©er le profil vendeur',
      };
    }
  }

  /**
   * Rechercher des vendeurs par proximit√©
   */
  async searchNearby(searchParams) {
    try {
      console.log('üîç Recherche de vendeurs √† proximit√©...');
      
      const { longitude, latitude, maxDistance, category, subCategory, page, limit } = searchParams;
      
      const queryParams = new URLSearchParams({
        longitude: longitude.toString(),
        latitude: latitude.toString(),
        maxDistance: maxDistance.toString(),
        category,
        ...(subCategory && { subCategory }),
        page: page?.toString() || '1',
        limit: limit?.toString() || '20'
      });

      const result = await apiRequest.get(`/sellers/search?${queryParams}`);

      if (result.success) {
        console.log('‚úÖ Vendeurs trouv√©s:', result.data.sellers?.length || 0);
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec recherche vendeurs:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la recherche',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service recherche vendeurs:', error);
      return {
        success: false,
        error: 'Impossible de rechercher des vendeurs',
      };
    }
  }

  /**
   * R√©cup√©rer un vendeur par ID
   */
  async getById(sellerId) {
    try {
      console.log('üëÅÔ∏è R√©cup√©ration du vendeur:', sellerId);
      
      const result = await apiRequest.get(`/sellers/${sellerId}`);

      if (result.success) {
        console.log('‚úÖ Vendeur r√©cup√©r√©');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration vendeur:', result.error);
        return {
          success: false,
          error: result.error || 'Vendeur non trouv√©',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service r√©cup√©ration vendeur:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer le vendeur',
      };
    }
  }

  /**
   * Basculer la disponibilit√© du vendeur
   */
  async toggleAvailability() {
    try {
      console.log('üîÑ Changement de disponibilit√©...');
      
      const result = await apiRequest.post('/sellers/availability');

      if (result.success) {
        console.log('‚úÖ Disponibilit√© chang√©e');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec changement disponibilit√©:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors du changement de disponibilit√©',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service disponibilit√©:', error);
      return {
        success: false,
        error: 'Impossible de changer la disponibilit√©',
      };
    }
  }

  /**
   * R√©cup√©rer les statistiques du vendeur
   */
  async getStats() {
    try {
      console.log('üìä R√©cup√©ration des statistiques vendeur...');
      
      const result = await apiRequest.get('/sellers/stats');

      if (result.success) {
        console.log('‚úÖ Statistiques r√©cup√©r√©es');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå √âchec r√©cup√©ration statistiques:', result.error);
        return {
          success: false,
          error: result.error || 'Erreur lors de la r√©cup√©ration des statistiques',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur service statistiques:', error);
      return {
        success: false,
        error: 'Impossible de r√©cup√©rer les statistiques',
      };
    }
  }

  // ============================================================
  // üß™ UTILITAIRES ET TESTS
  // ============================================================

  /**
   * Valider les donn√©es d'une sp√©cialit√©
   */
  validateSpecialtyData(specialtyData) {
    const { category, subCategories } = specialtyData;

    if (!category || typeof category !== 'string' || category.trim().length === 0) {
      return {
        isValid: false,
        error: 'La cat√©gorie est requise'
      };
    }

    if (!subCategories || !Array.isArray(subCategories) || subCategories.length === 0) {
      return {
        isValid: false,
        error: 'Au moins une sous-cat√©gorie est requise'
      };
    }

    for (const subCategory of subCategories) {
      if (!subCategory || typeof subCategory !== 'string' || subCategory.trim().length === 0) {
        return {
          isValid: false,
          error: 'Toutes les sous-cat√©gories doivent √™tre valides'
        };
      }
    }

    return {
      isValid: true
    };
  }

  /**
   * Valider les donn√©es du profil g√©n√©ral
   */
  validateGeneralInfoData(profileData) {
    const errors = [];

    if (profileData.businessName !== undefined) {
      if (!profileData.businessName || profileData.businessName.trim().length < 2) {
        errors.push('Le nom de l\'entreprise doit contenir au moins 2 caract√®res');
      }
      if (profileData.businessName.trim().length > 100) {
        errors.push('Le nom de l\'entreprise ne peut pas d√©passer 100 caract√®res');
      }
    }

    if (profileData.description !== undefined) {
      if (!profileData.description || profileData.description.trim().length < 10) {
        errors.push('La description doit contenir au moins 10 caract√®res');
      }
      if (profileData.description.trim().length > 500) {
        errors.push('La description ne peut pas d√©passer 500 caract√®res');
      }
    }

    if (profileData.phone !== undefined) {
      if (!profileData.phone || profileData.phone.trim().length < 10) {
        errors.push('Le num√©ro de t√©l√©phone doit contenir au moins 10 caract√®res');
      }
    }

    if (profileData.location !== undefined && profileData.location.coordinates) {
      const { coordinates } = profileData.location;
      if (!Array.isArray(coordinates) || coordinates.length !== 2) {
        errors.push('Les coordonn√©es de localisation sont invalides');
      }
      const [longitude, latitude] = coordinates;
      if (typeof longitude !== 'number' || typeof latitude !== 'number') {
        errors.push('Les coordonn√©es doivent √™tre des nombres');
      }
      if (longitude < -180 || longitude > 180 || latitude < -90 || latitude > 90) {
        errors.push('Les coordonn√©es sont hors des limites g√©ographiques');
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Tester la connexion au service vendeur
   */
  async testConnection() {
    try {
      console.log('üß™ Test de connexion au service vendeur...');
      
      const result = await apiRequest.get('/sellers/ping');

      if (result.success) {
        console.log('‚úÖ Service vendeur accessible');
        return {
          success: true,
          data: result.data,
        };
      } else {
        console.error('‚ùå Service vendeur non accessible:', result.error);
        return {
          success: false,
          error: result.error || 'Service non accessible',
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur test connexion service vendeur:', error);
      return {
        success: false,
        error: 'Erreur de connexion au service vendeur',
      };
    }
  }

  /**
   * Obtenir la configuration du service
   */
  getConfig() {
    return {
      endpoints: {
        profile: '/seller/profile',
        specialties: '/seller/specialties',
        search: '/sellers/search',
        stats: '/sellers/stats',
        availability: '/sellers/availability'
      },
      validation: {
        businessName: { min: 2, max: 100 },
        description: { min: 10, max: 500 },
        phone: { min: 10, max: 20 },
        specialties: { min: 1 }
      },
      features: {
        editProfile: true,
        manageSpecialties: true,
        search: true,
        statistics: true,
        availability: true
      }
    };
  }
}

// Exporter une instance unique du service
export default new SellerService();