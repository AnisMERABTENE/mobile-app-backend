const app = require('./app');
const connectDB = require('./config/database');

// ===================
// CONFIGURATION
// ===================

const PORT = process.env.PORT || 3000;

// ===================
// D√âMARRAGE DU SERVEUR
// ===================

const startServer = async () => {
  try {
    // 1. Connexion √† la base de donn√©es
    console.log('üîó Connexion √† MongoDB...');
    await connectDB();
    
    // 2. D√©marrage du serveur
    const server = app.listen(PORT, () => {
      console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
      console.log(`üì± API disponible sur: http://localhost:${PORT}/api`);
      console.log(`üß™ Route de test: http://localhost:${PORT}/api/test`);
      console.log(`üåç Environnement: ${process.env.NODE_ENV || 'development'}`);
    });

    // 3. Gestion de l'arr√™t propre du serveur
    const gracefulShutdown = (signal) => {
      console.log(`\nüì¥ Signal ${signal} re√ßu, arr√™t du serveur...`);
      
      server.close((err) => {
        if (err) {
          console.error('‚ùå Erreur lors de l\'arr√™t du serveur:', err);
          process.exit(1);
        }
        
        console.log('‚úÖ Serveur arr√™t√© proprement');
        process.exit(0);
      });
    };

    // √âcouter les signaux d'arr√™t
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
};

// Gestion des erreurs non g√©r√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non g√©r√©e:', error);
  process.exit(1);
});

// D√©marrer le serveur
startServer();