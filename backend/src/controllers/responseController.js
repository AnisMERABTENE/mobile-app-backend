const Response = require('../models/Response');
const Request = require('../models/Request');
const Seller = require('../models/Seller');
const User = require('../models/User');

/**
 * Cr√©er une nouvelle r√©ponse √† une demande - VERSION CORRIG√âE POUR PHOTOS
 */
const createResponse = async (req, res) => {
  try {
    const { requestId, message, price, photoUrls = [] } = req.body; // ‚úÖ CORRECTION : photoUrls au lieu de photos

    console.log('üìù Cr√©ation r√©ponse pour demande:', requestId);
    console.log('üë§ Vendeur:', req.user.email);
    console.log('üì∏ URLs photos re√ßues:', photoUrls.length, 'photos');

    // 1. V√©rifier que la demande existe et est active
    const request = await Request.findById(requestId);
    if (!request) {
      return res.status(404).json({
        error: 'Demande non trouv√©e'
      });
    }

    if (request.status !== 'active') {
      return res.status(400).json({
        error: 'Cette demande n\'est plus active'
      });
    }

    // 2. V√©rifier que l'utilisateur ne r√©pond pas √† sa propre demande
    if (request.user.toString() === req.user._id.toString()) {
      return res.status(400).json({
        error: 'Vous ne pouvez pas r√©pondre √† votre propre demande'
      });
    }

    // 3. V√©rifier que l'utilisateur a un profil vendeur actif
    const seller = await Seller.findOne({ 
      user: req.user._id,
      status: { $in: ['active', 'pending'] }  // ‚Üê ACCEPTER AUSSI "pending"
    });

    if (!seller) {
      return res.status(403).json({
        error: 'Vous devez avoir un profil vendeur actif pour r√©pondre aux demandes'
      });
    }

    // 4. V√©rifier qu'il n'y a pas d√©j√† une r√©ponse de ce vendeur
    const existingResponse = await Response.findOne({
      request: requestId,
      seller: seller._id
    });

    if (existingResponse) {
      return res.status(400).json({
        error: 'Vous avez d√©j√† r√©pondu √† cette demande'
      });
    }

    // 5. Valider les donn√©es
    if (!message || message.trim().length === 0) {
      return res.status(400).json({
        error: 'Le message est requis'
      });
    }

    if (!price || price < 0) {
      return res.status(400).json({
        error: 'Le prix doit √™tre un nombre positif'
      });
    }

    // ‚úÖ 6. NOUVELLE SECTION : Valider et formater les photos
    let validatedPhotos = [];
    
    console.log('üîç Validation des photos de la r√©ponse...');
    console.log('üì∏ URLs re√ßues:', JSON.stringify(photoUrls, null, 2));

    if (Array.isArray(photoUrls) && photoUrls.length > 0) {
      for (let i = 0; i < photoUrls.length; i++) {
        const photoUrl = photoUrls[i];
        console.log(`üì∏ Validation photo ${i + 1}:`, photoUrl);

        // ‚úÖ V√âRIFICATION CRITIQUE : Photo doit avoir une URL valide
        if (!photoUrl || typeof photoUrl !== 'string' || photoUrl.trim() === '') {
          console.warn(`‚ö†Ô∏è Photo ${i + 1} ignor√©e - URL manquante:`, photoUrl);
          continue;
        }

        // ‚úÖ V√©rifier que l'URL est s√©curis√©e et Cloudinary
        if (!photoUrl.startsWith('https://res.cloudinary.com/')) {
          console.warn(`‚ö†Ô∏è Photo ${i + 1} ignor√©e - URL non Cloudinary:`, photoUrl);
          continue;
        }

        // ‚úÖ FORMATAGE CORRECT POUR MONGODB : respecter le sch√©ma Response
        const validatedPhoto = {
          url: photoUrl.trim(),
          alt: `Photo de la r√©ponse ${i + 1}`
        };

        validatedPhotos.push(validatedPhoto);
        console.log(`‚úÖ Photo ${i + 1} valid√©e:`, validatedPhoto.url.substring(0, 80) + '...');
      }

      console.log('üìä R√©sultat validation photos r√©ponse:', {
        photosInitiales: photoUrls.length,
        photosValides: validatedPhotos.length,
        photosIgnorees: photoUrls.length - validatedPhotos.length
      });
    } else {
      console.log('‚ÑπÔ∏è Aucune photo √† valider pour cette r√©ponse');
    }

    // 6. Cr√©er la r√©ponse avec photos valid√©es
    const responseData = {
      request: requestId,
      seller: seller._id,
      sellerUser: req.user._id,
      message: message.trim(),
      price: parseFloat(price),
      photos: validatedPhotos // ‚úÖ CORRECTION : Utiliser les photos valid√©es au lieu de photos brutes
    };

    const newResponse = new Response(responseData);
    await newResponse.save();

    // 7. Populer les donn√©es pour la r√©ponse
    await newResponse.populate([
      {
        path: 'seller',
        select: 'businessName phone location'
      },
      {
        path: 'sellerUser',
        select: 'firstName lastName email avatar'
      },
      {
        path: 'request',
        select: 'title user',
        populate: {
          path: 'user',
          select: 'firstName lastName email'
        }
      }
    ]);

    console.log('‚úÖ R√©ponse cr√©√©e avec photos:', newResponse._id);
    console.log('üì∏ Photos sauvegard√©es:', newResponse.photos.length);

   // 8. Envoyer notification au client
   try {
    const NotificationService = require('../services/notificationService');
    const notificationResult = await NotificationService.notifyNewResponse(newResponse);
    
    if (notificationResult.success) {
      console.log('‚úÖ Client notifi√©:', notificationResult.clientNotified);
    } else {
      console.error('‚ö†Ô∏è Erreur notification (non-bloquant):', notificationResult.error);
    }
  } catch (notifError) {
    console.error('‚ö†Ô∏è Erreur notification (non-bloquant):', notifError);
  }

    res.status(201).json({
      message: 'R√©ponse envoy√©e avec succ√®s',
      response: newResponse
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation r√©ponse:', error);
    
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(e => e.message);
      console.error('‚ùå Erreurs de validation MongoDB:', errors); // ‚úÖ AJOUT : Log plus d√©taill√©
      return res.status(400).json({
        error: 'Erreurs de validation',
        details: errors
      });
    }

    if (error.code === 11000) {
      return res.status(400).json({
        error: 'Vous avez d√©j√† r√©pondu √† cette demande'
      });
    }

    res.status(500).json({
      error: 'Erreur lors de la cr√©ation de la r√©ponse'
    });
  }
};

/**
 * Obtenir toutes les r√©ponses d'une demande
 */
const getResponsesByRequest = async (req, res) => {
  try {
    const { requestId } = req.params;

    console.log('üîç R√©cup√©ration r√©ponses pour demande:', requestId);

    // 1. V√©rifier que la demande existe
    const request = await Request.findById(requestId);
    if (!request) {
      return res.status(404).json({
        error: 'Demande non trouv√©e'
      });
    }

    // 2. V√©rifier que l'utilisateur est le propri√©taire de la demande
    if (request.user.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        error: 'Vous ne pouvez voir que les r√©ponses √† vos propres demandes'
      });
    }

    // 3. R√©cup√©rer les r√©ponses
    const responses = await Response.find({ request: requestId })
      .populate('seller', 'businessName phone location isAvailable')
      .populate('sellerUser', 'firstName lastName email avatar')
      .sort({ createdAt: -1 });

    // 4. Marquer les r√©ponses comme lues
    await Response.updateMany(
      { 
        request: requestId,
        isRead: false
      },
      { 
        isRead: true,
        readAt: new Date()
      }
    );

    console.log('‚úÖ R√©ponses r√©cup√©r√©es:', responses.length);

    res.json({
      responses,
      count: responses.length,
      request: {
        id: request._id,
        title: request.title,
        responseCount: request.responseCount
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration r√©ponses:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration des r√©ponses'
    });
  }
};

/**
 * Obtenir toutes mes r√©ponses (vendeur)
 */
const getMyResponses = async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;

    console.log('üîç R√©cup√©ration mes r√©ponses pour:', req.user.email);

    // 1. V√©rifier que l'utilisateur a un profil vendeur
    const seller = await Seller.findOne({ user: req.user._id });
    if (!seller) {
      return res.status(404).json({
        error: 'Profil vendeur non trouv√©'
      });
    }

    // 2. Construire le filtre
    const filter = { seller: seller._id };
    if (status && ['pending', 'accepted', 'declined', 'cancelled'].includes(status)) {
      filter.status = status;
    }

    // 3. Pagination
    const skip = (page - 1) * limit;

    // 4. R√©cup√©rer les r√©ponses
    const responses = await Response.find(filter)
      .populate('request', 'title description category location user')
      .populate('request.user', 'firstName lastName email')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    // 5. Compter le total
    const total = await Response.countDocuments(filter);

    console.log('‚úÖ Mes r√©ponses r√©cup√©r√©es:', responses.length);

    res.json({
      responses,
      pagination: {
        current: parseInt(page),
        total: Math.ceil(total / limit),
        count: responses.length,
        totalItems: total
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration mes r√©ponses:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration de vos r√©ponses'
    });
  }
};

/**
 * Obtenir une r√©ponse par ID
 */
const getResponseById = async (req, res) => {
  try {
    const { id } = req.params;

    const response = await Response.findById(id)
      .populate('seller', 'businessName phone location')
      .populate('sellerUser', 'firstName lastName email avatar')
      .populate('request', 'title description user')
      .populate('request.user', 'firstName lastName email');

    if (!response) {
      return res.status(404).json({
        error: 'R√©ponse non trouv√©e'
      });
    }

    // V√©rifier les permissions
    const isOwner = response.request.user._id.toString() === req.user._id.toString();
    const isSeller = response.sellerUser._id.toString() === req.user._id.toString();

    if (!isOwner && !isSeller) {
      return res.status(403).json({
        error: 'Acc√®s non autoris√©'
      });
    }

    res.json({ response });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration r√©ponse:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration de la r√©ponse'
    });
  }
};

/**
 * Mettre √† jour le statut d'une r√©ponse (accepter/d√©cliner)
 */
const updateResponseStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, feedback } = req.body;

    console.log('üîÑ Mise √† jour statut r√©ponse:', id, '‚Üí', status);

    // 1. V√©rifier le statut
    if (!['accepted', 'declined'].includes(status)) {
      return res.status(400).json({
        error: 'Statut invalide. Doit √™tre "accepted" ou "declined"'
      });
    }

    // 2. R√©cup√©rer la r√©ponse
    const response = await Response.findById(id)
      .populate('request', 'user title')
      .populate('sellerUser', 'firstName lastName email');

    if (!response) {
      return res.status(404).json({
        error: 'R√©ponse non trouv√©e'
      });
    }

    // 3. V√©rifier que l'utilisateur est le propri√©taire de la demande
    if (response.request.user.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        error: 'Seul le propri√©taire de la demande peut accepter/d√©cliner les r√©ponses'
      });
    }

    // 4. V√©rifier que la r√©ponse est toujours en attente
    if (response.status !== 'pending') {
      return res.status(400).json({
        error: 'Cette r√©ponse a d√©j√† √©t√© trait√©e'
      });
    }

    // 5. Mettre √† jour le statut
    await response.updateStatus(status, feedback);

    console.log('‚úÖ Statut r√©ponse mis √† jour:', status);

    // 6. TODO: Envoyer notification au vendeur
    // Cela sera impl√©ment√© dans la prochaine √©tape

    res.json({
      message: `R√©ponse ${status === 'accepted' ? 'accept√©e' : 'd√©clin√©e'} avec succ√®s`,
      response
    });

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour statut:', error);
    res.status(500).json({
      error: 'Erreur lors de la mise √† jour du statut'
    });
  }
};

/**
 * Supprimer une r√©ponse
 */
const deleteResponse = async (req, res) => {
  try {
    const { id } = req.params;

    const response = await Response.findById(id);

    if (!response) {
      return res.status(404).json({
        error: 'R√©ponse non trouv√©e'
      });
    }

    // V√©rifier que l'utilisateur est le propri√©taire de la r√©ponse
    if (response.sellerUser.toString() !== req.user._id.toString()) {
      return res.status(403).json({
        error: 'Vous ne pouvez supprimer que vos propres r√©ponses'
      });
    }

    // Supprimer la r√©ponse
    await Response.findByIdAndDelete(id);

    console.log('‚úÖ R√©ponse supprim√©e:', id);

    res.json({
      message: 'R√©ponse supprim√©e avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur suppression r√©ponse:', error);
    res.status(500).json({
      error: 'Erreur lors de la suppression'
    });
  }
};

module.exports = {
  createResponse,
  getResponsesByRequest,
  getMyResponses,
  getResponseById,
  updateResponseStatus,
  deleteResponse
};