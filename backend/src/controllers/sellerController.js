const Seller = require('../models/Seller');
const User = require('../models/User');
const { validateCategoryAndSubCategory } = require('../config/categories');

/**
 * Cr√©er un nouveau profil vendeur
 */
const createSellerProfile = async (req, res) => {
  try {
    const {
      businessName,
      description,
      phone,
      location,
      serviceRadius,
      specialties
    } = req.body;

    // 1. V√©rifier que l'utilisateur n'a pas d√©j√† un profil vendeur
    const existingSeller = await Seller.findOne({ user: req.user._id });
    if (existingSeller) {
      return res.status(400).json({
        error: 'Vous avez d√©j√† un profil vendeur'
      });
    }

    // 2. Valider la g√©olocalisation
    if (!location || !location.coordinates || location.coordinates.length !== 2) {
      return res.status(400).json({
        error: 'Coordonn√©es de g√©olocalisation invalides'
      });
    }

    // 3. Valider le rayon de service
    if (!serviceRadius || serviceRadius < 1 || serviceRadius > 100) {
      return res.status(400).json({
        error: 'Le rayon de service doit √™tre entre 1 et 100 km'
      });
    }

    // 4. Valider les sp√©cialit√©s
    if (!specialties || specialties.length === 0) {
      return res.status(400).json({
        error: 'Au moins une sp√©cialit√© est requise'
      });
    }

    // V√©rifier chaque sp√©cialit√©
    for (const specialty of specialties) {
      if (!specialty.category || !specialty.subCategories || specialty.subCategories.length === 0) {
        return res.status(400).json({
          error: 'Chaque sp√©cialit√© doit avoir une cat√©gorie et au moins une sous-cat√©gorie'
        });
      }

      // Valider la cat√©gorie et les sous-cat√©gories
      for (const subCategory of specialty.subCategories) {
        if (!validateCategoryAndSubCategory(specialty.category, subCategory)) {
          return res.status(400).json({
            error: `Cat√©gorie ou sous-cat√©gorie invalide: ${specialty.category} > ${subCategory}`
          });
        }
      }
    }

    // 5. Cr√©er le profil vendeur
    const newSeller = new Seller({
      user: req.user._id,
      businessName: businessName.trim(),
      description: description.trim(),
      phone: phone.trim(),
      location: {
        type: 'Point',
        coordinates: location.coordinates,
        address: location.address,
        city: location.city,
        postalCode: location.postalCode,
        country: location.country || 'France'
      },
      serviceRadius,
      specialties,
      status: 'pending' // En attente de validation
    });

    // 6. Sauvegarder le profil vendeur
    const savedSeller = await newSeller.save();

    // 7. Mettre √† jour le r√¥le de l'utilisateur
    await User.findByIdAndUpdate(req.user._id, { role: 'seller' });

    // 8. Peupler les informations utilisateur pour la r√©ponse
    await savedSeller.populate('user', 'firstName lastName email avatar');

    console.log('‚úÖ Nouveau profil vendeur cr√©√©:', savedSeller.businessName, 'par', req.user.email);

    res.status(201).json({
      message: 'Profil vendeur cr√©√© avec succ√®s',
      seller: savedSeller
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation profil vendeur:', error);
    
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(e => e.message);
      return res.status(400).json({
        error: 'Erreurs de validation',
        details: errors
      });
    }

    res.status(500).json({
      error: 'Erreur lors de la cr√©ation du profil vendeur'
    });
  }
};

/**
 * R√©cup√©rer le profil vendeur de l'utilisateur connect√©
 */
const getMySellerProfile = async (req, res) => {
  try {
    const seller = await Seller.findOne({ user: req.user._id })
      .populate('user', 'firstName lastName email avatar');

    if (!seller) {
      return res.status(404).json({
        error: 'Aucun profil vendeur trouv√©'
      });
    }

    console.log('üë§ Profil vendeur r√©cup√©r√© pour:', req.user.email);

    res.json({
      seller
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration profil vendeur:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration du profil vendeur'
    });
  }
};

/**
 * Mettre √† jour le profil vendeur
 */
const updateSellerProfile = async (req, res) => {
  try {
    const updates = req.body;
    
    const seller = await Seller.findOne({ user: req.user._id });

    if (!seller) {
      return res.status(404).json({
        error: 'Aucun profil vendeur trouv√©'
      });
    }

    // Valider les sp√©cialit√©s si mises √† jour
    if (updates.specialties) {
      if (updates.specialties.length === 0) {
        return res.status(400).json({
          error: 'Au moins une sp√©cialit√© est requise'
        });
      }

      for (const specialty of updates.specialties) {
        if (!specialty.category || !specialty.subCategories || specialty.subCategories.length === 0) {
          return res.status(400).json({
            error: 'Chaque sp√©cialit√© doit avoir une cat√©gorie et au moins une sous-cat√©gorie'
          });
        }

        for (const subCategory of specialty.subCategories) {
          if (!validateCategoryAndSubCategory(specialty.category, subCategory)) {
            return res.status(400).json({
              error: `Cat√©gorie ou sous-cat√©gorie invalide: ${specialty.category} > ${subCategory}`
            });
          }
        }
      }
    }

    // Appliquer les mises √† jour
    Object.assign(seller, updates);
    const updatedSeller = await seller.save();

    await updatedSeller.populate('user', 'firstName lastName email avatar');

    console.log('‚úèÔ∏è Profil vendeur mis √† jour:', updatedSeller.businessName);

    res.json({
      message: 'Profil vendeur mis √† jour avec succ√®s',
      seller: updatedSeller
    });

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour profil vendeur:', error);
    res.status(500).json({
      error: 'Erreur lors de la mise √† jour du profil vendeur'
    });
  }
};

/**
 * Changer le statut de disponibilit√©
 */
const toggleAvailability = async (req, res) => {
  try {
    const seller = await Seller.findOne({ user: req.user._id });

    if (!seller) {
      return res.status(404).json({
        error: 'Aucun profil vendeur trouv√©'
      });
    }

    seller.isAvailable = !seller.isAvailable;
    seller.lastActiveAt = new Date();
    await seller.save();

    console.log('üîÑ Disponibilit√© vendeur chang√©e:', seller.isAvailable ? 'Disponible' : 'Indisponible');

    res.json({
      message: `Statut chang√©: ${seller.isAvailable ? 'Disponible' : 'Indisponible'}`,
      isAvailable: seller.isAvailable
    });

  } catch (error) {
    console.error('‚ùå Erreur changement disponibilit√©:', error);
    res.status(500).json({
      error: 'Erreur lors du changement de disponibilit√©'
    });
  }
};

/**
 * Rechercher des vendeurs par proximit√© et sp√©cialit√©
 */
const searchSellers = async (req, res) => {
  try {
    const { longitude, latitude, maxDistance = 10, category, subCategory, page = 1, limit = 20 } = req.query;

    // 1. Valider les coordonn√©es
    if (!longitude || !latitude) {
      return res.status(400).json({
        error: 'Coordonn√©es de g√©olocalisation requises'
      });
    }

    // 2. Valider la cat√©gorie
    if (!category) {
      return res.status(400).json({
        error: 'Cat√©gorie requise'
      });
    }

    // 3. Rechercher les vendeurs
    const sellers = await Seller.findNearbyBySpecialty(
      parseFloat(longitude),
      parseFloat(latitude),
      parseInt(maxDistance),
      category,
      subCategory
    );

    // 4. Pagination
    const skip = (page - 1) * limit;
    const paginatedSellers = sellers.slice(skip, skip + parseInt(limit));

    console.log(`üîç ${sellers.length} vendeurs trouv√©s pour ${category}${subCategory ? ` > ${subCategory}` : ''} pr√®s de [${latitude}, ${longitude}]`);

    res.json({
      sellers: paginatedSellers,
      pagination: {
        current: parseInt(page),
        total: Math.ceil(sellers.length / limit),
        count: paginatedSellers.length,
        totalItems: sellers.length
      },
      searchParams: {
        longitude: parseFloat(longitude),
        latitude: parseFloat(latitude),
        maxDistance: parseInt(maxDistance),
        category,
        subCategory
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur recherche vendeurs:', error);
    res.status(500).json({
      error: 'Erreur lors de la recherche de vendeurs'
    });
  }
};

/**
 * R√©cup√©rer un vendeur par ID
 */
const getSellerById = async (req, res) => {
  try {
    const { id } = req.params;

    const seller = await Seller.findById(id)
      .populate('user', 'firstName lastName email avatar');

    if (!seller) {
      return res.status(404).json({
        error: 'Vendeur non trouv√©'
      });
    }

    // Mettre √† jour la derni√®re activit√© si c'est le profil du vendeur lui-m√™me
    if (seller.user._id.toString() === req.user._id.toString()) {
      await seller.updateActivity();
    }

    console.log('üëÅÔ∏è Profil vendeur consult√©:', seller.businessName);

    res.json({
      seller
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration vendeur:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration du vendeur'
    });
  }
};

/**
 * R√©cup√©rer les statistiques du vendeur
 */
const getSellerStats = async (req, res) => {
  try {
    const seller = await Seller.findOne({ user: req.user._id });

    if (!seller) {
      return res.status(404).json({
        error: 'Aucun profil vendeur trouv√©'
      });
    }

    // Calculer des statistiques additionnelles
    const stats = {
      ...seller.stats,
      accountAge: Math.floor((new Date() - seller.createdAt) / (1000 * 60 * 60 * 24)), // jours
      isOnline: seller.lastActiveAt && (new Date() - seller.lastActiveAt) < 15 * 60 * 1000,
      responseRate: seller.stats.totalRequests > 0 
        ? Math.round((seller.stats.respondedRequests / seller.stats.totalRequests) * 100)
        : 0
    };

    console.log('üìä Statistiques vendeur r√©cup√©r√©es pour:', req.user.email);

    res.json({
      stats
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration stats vendeur:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration des statistiques'
    });
  }
};

/**
 * Supprimer le profil vendeur
 */
const deleteSellerProfile = async (req, res) => {
  try {
    const seller = await Seller.findOne({ user: req.user._id });

    if (!seller) {
      return res.status(404).json({
        error: 'Aucun profil vendeur trouv√©'
      });
    }

    await Seller.findByIdAndDelete(seller._id);

    // Remettre le r√¥le utilisateur √† 'user'
    await User.findByIdAndUpdate(req.user._id, { role: 'user' });

    console.log('üóëÔ∏è Profil vendeur supprim√© pour:', req.user.email);

    res.json({
      message: 'Profil vendeur supprim√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur suppression profil vendeur:', error);
    res.status(500).json({
      error: 'Erreur lors de la suppression du profil vendeur'
    });
  }
};

/**
 * R√©cup√©rer les vendeurs recommand√©s pour une demande
 */
const getRecommendedSellers = async (req, res) => {
  try {
    const { requestId } = req.params;
    
    // TODO: Impl√©menter la logique pour r√©cup√©rer une demande
    // et trouver les vendeurs recommand√©s bas√©s sur:
    // - La localisation de la demande
    // - La cat√©gorie et sous-cat√©gorie
    // - Les √©valuations des vendeurs
    // - Leur disponibilit√©

    res.json({
      message: 'Fonctionnalit√© en cours de d√©veloppement',
      recommendedSellers: []
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration vendeurs recommand√©s:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration des vendeurs recommand√©s'
    });
  }
};

/**
 * Mettre √† jour les param√®tres de notification
 */
const updateNotificationSettings = async (req, res) => {
  try {
    const { notificationSettings } = req.body;

    const seller = await Seller.findOne({ user: req.user._id });

    if (!seller) {
      return res.status(404).json({
        error: 'Aucun profil vendeur trouv√©'
      });
    }

    seller.notificationSettings = { ...seller.notificationSettings, ...notificationSettings };
    await seller.save();

    console.log('üîî Param√®tres de notification mis √† jour pour:', req.user.email);

    res.json({
      message: 'Param√®tres de notification mis √† jour',
      notificationSettings: seller.notificationSettings
    });

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour notifications:', error);
    res.status(500).json({
      error: 'Erreur lors de la mise √† jour des notifications'
    });
  }
};

module.exports = {
  createSellerProfile,
  getMySellerProfile,
  updateSellerProfile,
  toggleAvailability,
  searchSellers,
  getSellerById,
  getSellerStats,
  deleteSellerProfile,
  getRecommendedSellers,
  updateNotificationSettings
};