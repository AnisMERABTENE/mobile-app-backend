const User = require('../models/User');
const { 
  generateToken, 
  generateResetToken, 
  generateVerificationToken,
  verifyToken 
} = require('../utils/jwt');
const { sanitizeUserInput } = require('../utils/validation');
const { sendVerificationEmail, sendResetPasswordEmail } = require('../utils/emailService');

/**
 * Inscription d'un nouvel utilisateur
 */
const register = async (req, res) => {
  try {
    // 1. Nettoyer et extraire les donn√©es
    const cleanData = sanitizeUserInput(req.body);
    const { firstName, lastName, email } = cleanData;
    const { password } = req.body;

    // 2. V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({
        error: 'Un compte avec cet email existe d√©j√†'
      });
    }

    // 3. Cr√©er le nouvel utilisateur
    const user = new User({
      firstName,
      lastName,
      email,
      password // Le hashage se fait automatiquement dans le mod√®le
    });

    // 4. G√©n√©rer le token de v√©rification d'email
    const verificationToken = generateVerificationToken(user);
    user.emailVerificationToken = verificationToken;
    user.emailVerificationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24h

    // 5. Sauvegarder l'utilisateur
    await user.save();

    // 6. G√©n√©rer le token JWT pour la session
    const authToken = generateToken(user);

    // 7. R√©ponse (sans le mot de passe)
    const userResponse = user.toJSON();

    res.status(201).json({
      message: 'Compte cr√©√© avec succ√®s',
      user: userResponse,
      token: authToken,
      emailVerificationRequired: true
    });

    // Envoyer l'email de v√©rification
    console.log(`üìß Envoi de l'email de v√©rification √† ${email}...`);
    const emailResult = await sendVerificationEmail(user, verificationToken);
    
    if (emailResult.success) {
      console.log('‚úÖ Email de v√©rification envoy√© avec succ√®s');
    } else {
      console.error('‚ùå Erreur envoi email de v√©rification:', emailResult.error);
    }

  } catch (error) {
    console.error('Erreur inscription:', error);
    
    // Gestion des erreurs de validation MongoDB
    if (error.name === 'ValidationError') {
      const errors = Object.values(error.errors).map(e => e.message);
      return res.status(400).json({
        error: 'Erreurs de validation',
        details: errors
      });
    }

    res.status(500).json({
      error: 'Erreur lors de la cr√©ation du compte'
    });
  }
};

/**
 * Connexion d'un utilisateur
 */
const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // 1. Trouver l'utilisateur avec le mot de passe
    const user = await User.findOne({ email }).select('+password');
    
    if (!user) {
      return res.status(401).json({
        error: 'Email ou mot de passe incorrect'
      });
    }

    // 2. V√©rifier si le compte est verrouill√©
    if (user.isLocked) {
      return res.status(423).json({
        error: 'Compte temporairement verrouill√© en raison de trop nombreuses tentatives',
        lockUntil: user.lockUntil
      });
    }

    // 3. V√©rifier le mot de passe
    const isPasswordValid = await user.comparePassword(password);
    
    if (!isPasswordValid) {
      // Incr√©menter les tentatives de connexion √©chou√©es
      await user.incLoginAttempts();
      
      return res.status(401).json({
        error: 'Email ou mot de passe incorrect'
      });
    }

    // 4. V√©rifier si le compte est actif
    if (!user.isActive) {
      return res.status(401).json({
        error: 'Compte d√©sactiv√©'
      });
    }

    // 5. R√©initialiser les tentatives de connexion
    if (user.loginAttempts > 0) {
      await user.resetLoginAttempts();
    }

    // 6. Mettre √† jour la derni√®re connexion
    user.lastLoginAt = new Date();
    await user.save();

    // 7. G√©n√©rer le token JWT
    const token = generateToken(user);

    // 8. R√©ponse (sans le mot de passe)
    const userResponse = user.toJSON();

    res.json({
      message: 'Connexion r√©ussie',
      user: userResponse,
      token,
      emailVerificationRequired: !user.isEmailVerified
    });

  } catch (error) {
    console.error('Erreur connexion:', error);
    res.status(500).json({
      error: 'Erreur lors de la connexion'
    });
  }
};

/**
 * Demande de r√©initialisation de mot de passe
 */
const forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    // 1. Trouver l'utilisateur
    const user = await User.findOne({ email });
    
    if (!user) {
      // Pour des raisons de s√©curit√©, on ne r√©v√®le pas si l'email existe
      return res.json({
        message: 'Si cet email est enregistr√©, vous recevrez un lien de r√©initialisation'
      });
    }

    // 2. V√©rifier si le compte est actif
    if (!user.isActive) {
      return res.json({
        message: 'Si cet email est enregistr√©, vous recevrez un lien de r√©initialisation'
      });
    }

    // 3. G√©n√©rer le token de r√©initialisation
    const resetToken = generateResetToken(user);
    
    // 4. Sauvegarder le token dans la base de donn√©es
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = new Date(Date.now() + 60 * 60 * 1000); // 1 heure
    await user.save();

    res.json({
      message: 'Si cet email est enregistr√©, vous recevrez un lien de r√©initialisation'
    });

    // Envoyer l'email de r√©initialisation
    console.log(`üìß Envoi de l'email de r√©initialisation √† ${email}...`);
    const emailResult = await sendResetPasswordEmail(user, resetToken);
    
    if (emailResult.success) {
      console.log('‚úÖ Email de r√©initialisation envoy√© avec succ√®s');
    } else {
      console.error('‚ùå Erreur envoi email de r√©initialisation:', emailResult.error);
    }

  } catch (error) {
    console.error('Erreur forgot password:', error);
    res.status(500).json({
      error: 'Erreur lors de la demande de r√©initialisation'
    });
  }
};

/**
 * R√©initialisation du mot de passe
 */
const resetPassword = async (req, res) => {
  try {
    const { token, password } = req.body;

    // 1. V√©rifier le token
    let decoded;
    try {
      decoded = verifyToken(token, 'mobile-app-reset');
    } catch (error) {
      return res.status(400).json({
        error: 'Token de r√©initialisation invalide ou expir√©'
      });
    }

    // 2. Trouver l'utilisateur avec le token
    const user = await User.findOne({
      _id: decoded.id,
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({
        error: 'Token de r√©initialisation invalide ou expir√©'
      });
    }

    // 3. Mettre √† jour le mot de passe
    user.password = password; // Le hashage se fait automatiquement
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;
    
    // R√©initialiser les tentatives de connexion
    user.loginAttempts = 0;
    user.lockUntil = undefined;
    
    await user.save();

    // 4. G√©n√©rer un nouveau token de session
    const authToken = generateToken(user);

    res.json({
      message: 'Mot de passe r√©initialis√© avec succ√®s',
      token: authToken
    });

  } catch (error) {
    console.error('Erreur reset password:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©initialisation du mot de passe'
    });
  }
};

/**
 * V√©rification d'email
 */
const verifyEmail = async (req, res) => {
  try {
    const { token } = req.body;

    // 1. V√©rifier le token
    let decoded;
    try {
      decoded = verifyToken(token, 'mobile-app-verification');
    } catch (error) {
      return res.status(400).json({
        error: 'Token de v√©rification invalide ou expir√©'
      });
    }

    // 2. Trouver l'utilisateur
    const user = await User.findOne({
      _id: decoded.id,
      emailVerificationToken: token,
      emailVerificationExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({
        error: 'Token de v√©rification invalide ou expir√©'
      });
    }

    // 3. Marquer l'email comme v√©rifi√©
    user.isEmailVerified = true;
    user.emailVerificationToken = undefined;
    user.emailVerificationExpires = undefined;
    await user.save();

    res.json({
      message: 'Email v√©rifi√© avec succ√®s'
    });

  } catch (error) {
    console.error('Erreur v√©rification email:', error);
    res.status(500).json({
      error: 'Erreur lors de la v√©rification de l\'email'
    });
  }
};

/**
 * Obtenir le profil utilisateur actuel
 */
const getProfile = async (req, res) => {
  try {
    // L'utilisateur est d√©j√† disponible via le middleware d'authentification
    res.json({
      user: req.user
    });
  } catch (error) {
    console.error('Erreur get profile:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration du profil'
    });
  }
};

/**
 * D√©connexion (c√¥t√© client principalement)
 */
const logout = async (req, res) => {
  try {
    // TODO: Impl√©menter une blacklist de tokens si n√©cessaire
    res.json({
      message: 'D√©connexion r√©ussie'
    });
  } catch (error) {
    console.error('Erreur logout:', error);
    res.status(500).json({
      error: 'Erreur lors de la d√©connexion'
    });
  }
};

module.exports = {
  register,
  login,
  forgotPassword,
  resetPassword,
  verifyEmail,
  getProfile,
  logout
};