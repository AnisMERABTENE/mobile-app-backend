// backend/src/services/expoPushService.js
const { Expo } = require('expo-server-sdk');

/**
 * Service de notifications push Expo
 * üéØ S'ajoute au syst√®me Socket.IO existant SANS le remplacer
 */
class ExpoPushService {
  
  constructor() {
    // Cr√©er une nouvelle instance Expo SDK
    this.expo = new Expo();
    this.isEnabled = true;
    
    console.log('üîî ExpoPushService initialis√©');
    console.log('üìä Expo SDK version:', this.expo.constructor.name);
  }

  /**
   * Valider un token Expo Push
   */
  isValidExpoPushToken(token) {
    if (!token) {
      return false;
    }
    
    return Expo.isExpoPushToken(token);
  }

  /**
   * Envoyer une notification push √† un utilisateur
   */
  async sendPushNotification(expoPushToken, title, body, data = {}) {
    try {
      // V√©rifier que le service est activ√©
      if (!this.isEnabled) {
        console.log('‚ö†Ô∏è Service push d√©sactiv√©');
        return {
          success: false,
          error: 'Service de notifications push d√©sactiv√©'
        };
      }

      // Valider le token
      if (!this.isValidExpoPushToken(expoPushToken)) {
        console.log('‚ùå Token Expo Push invalide:', expoPushToken?.substring(0, 20) + '...');
        return {
          success: false,
          error: 'Token Expo Push invalide'
        };
      }

      console.log('üì§ Envoi notification push...');
      console.log('üéØ Token:', expoPushToken.substring(0, 20) + '...');
      console.log('üì± Titre:', title);
      console.log('üí¨ Message:', body);

      // Cr√©er le message de notification
      const message = {
        to: expoPushToken,
        sound: 'default',
        title: title,
        body: body,
        data: {
          ...data,
          timestamp: new Date().toISOString(),
        },
        priority: 'high',
        badge: 1,
      };

      // Envoyer la notification
      const chunks = this.expo.chunkPushNotifications([message]);
      const tickets = [];

      for (const chunk of chunks) {
        try {
          const ticketChunk = await this.expo.sendPushNotificationsAsync(chunk);
          tickets.push(...ticketChunk);
          console.log('üì® Chunk envoy√©:', ticketChunk.length, 'notifications');
        } catch (chunkError) {
          console.error('‚ùå Erreur envoi chunk:', chunkError);
        }
      }

      // Analyser les r√©sultats
      const results = this.analyzeTickets(tickets);
      
      if (results.successCount > 0) {
        console.log('‚úÖ Notification push envoy√©e avec succ√®s');
        return {
          success: true,
          tickets: tickets,
          results: results,
          message: `${results.successCount} notification(s) envoy√©e(s)`
        };
      } else {
        console.log('‚ùå √âchec envoi notification push:', results.errors);
        return {
          success: false,
          error: '√âchec envoi notification',
          tickets: tickets,
          results: results
        };
      }

    } catch (error) {
      console.error('‚ùå Erreur ExpoPushService.sendPushNotification:', error);
      return {
        success: false,
        error: error.message || 'Erreur inconnue lors de l\'envoi'
      };
    }
  }

  /**
   * Envoyer des notifications √† plusieurs utilisateurs
   */
  async sendBulkPushNotifications(notifications) {
    try {
      if (!Array.isArray(notifications) || notifications.length === 0) {
        return {
          success: false,
          error: 'Aucune notification √† envoyer'
        };
      }

      console.log(`üì§ Envoi en masse: ${notifications.length} notifications`);

      // Cr√©er les messages
      const messages = [];
      
      for (const notif of notifications) {
        if (this.isValidExpoPushToken(notif.expoPushToken)) {
          messages.push({
            to: notif.expoPushToken,
            sound: 'default',
            title: notif.title,
            body: notif.body,
            data: {
              ...notif.data,
              timestamp: new Date().toISOString(),
            },
            priority: 'high',
            badge: 1,
          });
        } else {
          console.log('‚ö†Ô∏è Token invalide ignor√©:', notif.expoPushToken?.substring(0, 20) + '...');
        }
      }

      if (messages.length === 0) {
        return {
          success: false,
          error: 'Aucun token valide trouv√©'
        };
      }

      // Envoyer par chunks
      const chunks = this.expo.chunkPushNotifications(messages);
      const allTickets = [];

      for (const chunk of chunks) {
        try {
          const ticketChunk = await this.expo.sendPushNotificationsAsync(chunk);
          allTickets.push(...ticketChunk);
          console.log('üì® Chunk masse envoy√©:', ticketChunk.length, 'notifications');
        } catch (chunkError) {
          console.error('‚ùå Erreur chunk masse:', chunkError);
        }
      }

      // Analyser les r√©sultats
      const results = this.analyzeTickets(allTickets);
      
      console.log(`‚úÖ Envoi masse termin√©: ${results.successCount}/${messages.length} r√©ussies`);
      
      return {
        success: results.successCount > 0,
        totalSent: messages.length,
        tickets: allTickets,
        results: results,
        message: `${results.successCount}/${messages.length} notifications envoy√©es`
      };

    } catch (error) {
      console.error('‚ùå Erreur envoi masse:', error);
      return {
        success: false,
        error: error.message || 'Erreur envoi en masse'
      };
    }
  }

  /**
   * Analyser les tickets de r√©ponse
   */
  analyzeTickets(tickets) {
    const results = {
      successCount: 0,
      errorCount: 0,
      errors: []
    };

    for (const ticket of tickets) {
      if (ticket.status === 'ok') {
        results.successCount++;
      } else if (ticket.status === 'error') {
        results.errorCount++;
        results.errors.push({
          code: ticket.details?.error || 'unknown',
          message: ticket.message || 'Erreur inconnue'
        });
        
        console.log('‚ö†Ô∏è Erreur ticket:', ticket.message);
      }
    }

    return results;
  }

  /**
   * V√©rifier les re√ßus de notifications (optionnel)
   */
  async checkReceipts(receiptIds) {
    try {
      if (!Array.isArray(receiptIds) || receiptIds.length === 0) {
        return {
          success: false,
          error: 'Aucun ID de re√ßu fourni'
        };
      }

      console.log(`üßæ V√©rification ${receiptIds.length} re√ßus...`);

      const receiptIdChunks = this.expo.chunkPushNotificationReceiptIds(receiptIds);
      const allReceipts = {};

      for (const chunk of receiptIdChunks) {
        try {
          const receipts = await this.expo.getPushNotificationReceiptsAsync(chunk);
          Object.assign(allReceipts, receipts);
        } catch (receiptError) {
          console.error('‚ùå Erreur v√©rification re√ßus:', receiptError);
        }
      }

      console.log('‚úÖ Re√ßus v√©rifi√©s:', Object.keys(allReceipts).length);
      
      return {
        success: true,
        receipts: allReceipts
      };

    } catch (error) {
      console.error('‚ùå Erreur checkReceipts:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Cr√©er une notification format√©e pour une nouvelle demande
   */
  createNewRequestNotification(requestData) {
    const title = 'Nouvelle demande !';
    const body = `${requestData.title} - ${requestData.location?.city || 'Localisation inconnue'}`;
    
    const data = {
      type: 'new_request',
      request: {
        id: requestData._id || requestData.id,
        title: requestData.title,
        category: requestData.category,
        subCategory: requestData.subCategory,
        location: requestData.location,
      },
      // Donn√©es pour la navigation
      screen: 'RequestDetail',
      params: {
        requestId: requestData._id || requestData.id
      }
    };

    return {
      title,
      body,
      data
    };
  }

  /**
   * Obtenir les statistiques du service
   */
  getStats() {
    return {
      isEnabled: this.isEnabled,
      sdkVersion: 'expo-server-sdk v3.10.0',
      service: 'Expo Push Notifications',
      timestamp: new Date().toISOString()
    };
  }

  /**
   * D√©sactiver temporairement le service
   */
  disable() {
    this.isEnabled = false;
    console.log('üîá Service Expo Push d√©sactiv√©');
  }

  /**
   * R√©activer le service
   */
  enable() {
    this.isEnabled = true;
    console.log('üîî Service Expo Push r√©activ√©');
  }
}

// Instance unique
const expoPushService = new ExpoPushService();

module.exports = expoPushService;