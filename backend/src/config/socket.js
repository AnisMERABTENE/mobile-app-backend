// backend/src/config/socket.js
const { Server } = require('socket.io');
const { verifyToken } = require('../utils/jwt');
const User = require('../models/User');

let io;

/**
 * Initialiser Socket.IO
 */
const initializeSocket = (server) => {
  console.log('üîå Initialisation Socket.IO...');
  
  io = new Server(server, {
    cors: {
      origin: "*", // En production, sp√©cifier les domaines autoris√©s
      methods: ["GET", "POST"],
      credentials: true
    },
    transports: ['websocket', 'polling'],
    pingTimeout: 60000,
    pingInterval: 25000
  });

  // Middleware d'authentification pour Socket.IO
  io.use(async (socket, next) => {
    try {
      console.log('üîê Authentification Socket.IO...');
      
      const token = socket.handshake.auth?.token || socket.handshake.headers?.authorization?.replace('Bearer ', '');
      
      if (!token) {
        console.log('‚ùå Pas de token fourni pour Socket.IO');
        return next(new Error('Token d\'authentification requis'));
      }

      // V√©rifier le token
      const decoded = verifyToken(token);
      
      // R√©cup√©rer l'utilisateur
      const user = await User.findById(decoded.id).select('-password');
      
      if (!user || !user.isActive) {
        console.log('‚ùå Utilisateur invalide pour Socket.IO');
        return next(new Error('Utilisateur invalide'));
      }

      // Attacher l'utilisateur au socket
      socket.userId = user._id.toString();
      socket.userEmail = user.email;
      socket.userRole = user.role;
      
      console.log('‚úÖ Utilisateur authentifi√© Socket.IO:', user.email);
      next();
      
    } catch (error) {
      console.error('‚ùå Erreur auth Socket.IO:', error.message);
      next(new Error('Token invalide'));
    }
  });

  // Gestion des connexions
  io.on('connection', (socket) => {
    console.log(`üîó Nouvelle connexion Socket.IO: ${socket.userEmail} (${socket.id})`);
    
    // Rejoindre la room de l'utilisateur (pour notifications personnelles)
    socket.join(`user:${socket.userId}`);
    
    // Rejoindre la room des vendeurs si l'utilisateur est vendeur
    if (socket.userRole === 'seller') {
      socket.join('sellers');
      console.log(`üë®‚Äçüíº Vendeur ${socket.userEmail} ajout√© √† la room sellers`);
    }

    // √âv√©nement de test
    socket.on('ping', (data) => {
      console.log('üèì Ping re√ßu de:', socket.userEmail, data);
      socket.emit('pong', { 
        message: 'Pong!', 
        timestamp: new Date().toISOString(),
        user: socket.userEmail 
      });
    });

    // √âv√©nement pour rejoindre des rooms sp√©cifiques
    socket.on('join_seller_region', (data) => {
      const { city, postalCode } = data;
      if (socket.userRole === 'seller' && city && postalCode) {
        const regionRoom = `region:${city}:${postalCode}`;
        socket.join(regionRoom);
        console.log(`üìç Vendeur ${socket.userEmail} rejoint la r√©gion: ${regionRoom}`);
        socket.emit('region_joined', { region: regionRoom });
      }
    });

    // √âv√©nement pour rejoindre des cat√©gories sp√©cifiques
    socket.on('join_seller_categories', (data) => {
      const { categories } = data;
      if (socket.userRole === 'seller' && Array.isArray(categories)) {
        categories.forEach(category => {
          const categoryRoom = `category:${category}`;
          socket.join(categoryRoom);
          console.log(`üè∑Ô∏è Vendeur ${socket.userEmail} rejoint la cat√©gorie: ${category}`);
        });
        socket.emit('categories_joined', { categories });
      }
    });

    // D√©connexion
    socket.on('disconnect', (reason) => {
      console.log(`üîå D√©connexion Socket.IO: ${socket.userEmail} (${reason})`);
    });

    // Gestion des erreurs
    socket.on('error', (error) => {
      console.error('‚ùå Erreur Socket.IO:', error);
    });
  });

  console.log('‚úÖ Socket.IO initialis√© avec succ√®s');
  return io;
};

/**
 * Obtenir l'instance Socket.IO
 */
const getSocketIO = () => {
  if (!io) {
    throw new Error('Socket.IO non initialis√©');
  }
  return io;
};

/**
 * Envoyer une notification √† un utilisateur sp√©cifique
 */
const sendNotificationToUser = (userId, eventName, data) => {
  try {
    if (!io) {
      console.error('‚ùå Socket.IO non initialis√© pour notification utilisateur');
      return false;
    }
    
    const room = `user:${userId}`;
    io.to(room).emit(eventName, {
      ...data,
      timestamp: new Date().toISOString(),
      id: require('crypto').randomUUID()
    });
    
    console.log(`üì® Notification envoy√©e √† ${userId}: ${eventName}`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur envoi notification utilisateur:', error);
    return false;
  }
};

/**
 * Envoyer une notification √† tous les vendeurs
 */
const sendNotificationToSellers = (eventName, data) => {
  try {
    if (!io) {
      console.error('‚ùå Socket.IO non initialis√© pour notification vendeurs');
      return false;
    }
    
    io.to('sellers').emit(eventName, {
      ...data,
      timestamp: new Date().toISOString(),
      id: require('crypto').randomUUID()
    });
    
    console.log(`üì® Notification envoy√©e √† tous les vendeurs: ${eventName}`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur envoi notification vendeurs:', error);
    return false;
  }
};

/**
 * Envoyer une notification √† des vendeurs sp√©cifiques
 */
const sendNotificationToSpecificSellers = (sellerIds, eventName, data) => {
  try {
    if (!io) {
      console.error('‚ùå Socket.IO non initialis√© pour notification vendeurs sp√©cifiques');
      return false;
    }
    
    sellerIds.forEach(sellerId => {
      const room = `user:${sellerId}`;
      io.to(room).emit(eventName, {
        ...data,
        timestamp: new Date().toISOString(),
        id: require('crypto').randomUUID()
      });
    });
    
    console.log(`üì® Notification envoy√©e √† ${sellerIds.length} vendeurs sp√©cifiques: ${eventName}`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur envoi notification vendeurs sp√©cifiques:', error);
    return false;
  }
};

/**
 * Envoyer une notification √† une r√©gion g√©ographique
 */
const sendNotificationToRegion = (city, postalCode, eventName, data) => {
  try {
    if (!io) {
      console.error('‚ùå Socket.IO non initialis√© pour notification r√©gion');
      return false;
    }
    
    const regionRoom = `region:${city}:${postalCode}`;
    io.to(regionRoom).emit(eventName, {
      ...data,
      timestamp: new Date().toISOString(),
      id: require('crypto').randomUUID()
    });
    
    console.log(`üì® Notification envoy√©e √† la r√©gion ${regionRoom}: ${eventName}`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur envoi notification r√©gion:', error);
    return false;
  }
};

/**
 * Envoyer une notification √† une cat√©gorie
 */
const sendNotificationToCategory = (category, eventName, data) => {
  try {
    if (!io) {
      console.error('‚ùå Socket.IO non initialis√© pour notification cat√©gorie');
      return false;
    }
    
    const categoryRoom = `category:${category}`;
    io.to(categoryRoom).emit(eventName, {
      ...data,
      timestamp: new Date().toISOString(),
      id: require('crypto').randomUUID()
    });
    
    console.log(`üì® Notification envoy√©e √† la cat√©gorie ${categoryRoom}: ${eventName}`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur envoi notification cat√©gorie:', error);
    return false;
  }
};

/**
 * Obtenir les statistiques des connexions
 */
const getConnectionStats = () => {
  try {
    if (!io) {
      return { connected: 0, sellers: 0 };
    }
    
    const sockets = io.sockets.sockets;
    const connected = sockets.size;
    const sellers = Array.from(sockets.values()).filter(socket => socket.userRole === 'seller').length;
    
    return { connected, sellers };
  } catch (error) {
    console.error('‚ùå Erreur stats connexions:', error);
    return { connected: 0, sellers: 0 };
  }
};

module.exports = {
  initializeSocket,
  getSocketIO,
  sendNotificationToUser,
  sendNotificationToSellers,
  sendNotificationToSpecificSellers,
  sendNotificationToRegion,
  sendNotificationToCategory,
  getConnectionStats
};